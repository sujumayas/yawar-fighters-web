{
  "_args": [
    [
      {
        "raw": "postcss-cli@^2.5.1",
        "scope": null,
        "escapedName": "postcss-cli",
        "name": "postcss-cli",
        "rawSpec": "^2.5.1",
        "spec": ">=2.5.1 <3.0.0",
        "type": "range"
      },
      "/home/diego/Code/yawarfighters"
    ]
  ],
  "_from": "postcss-cli@>=2.5.1 <3.0.0",
  "_id": "postcss-cli@2.6.0",
  "_inCache": true,
  "_location": "/postcss-cli",
  "_nodeVersion": "6.0.0",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/postcss-cli-2.6.0.tgz_1472513746351_0.19306418811902404"
  },
  "_npmUser": {
    "name": "watilde",
    "email": "daijiro.wachi@gmail.com"
  },
  "_npmVersion": "3.10.7",
  "_phantomChildren": {
    "cliui": "3.2.0",
    "decamelize": "1.2.0",
    "get-caller-file": "1.0.2",
    "lodash.assign": "4.2.0",
    "os-locale": "1.4.0",
    "read-pkg-up": "1.0.1",
    "require-directory": "2.1.1",
    "require-main-filename": "1.0.1",
    "set-blocking": "2.0.0",
    "string-width": "1.0.2",
    "which-module": "1.0.0",
    "y18n": "3.2.1"
  },
  "_requested": {
    "raw": "postcss-cli@^2.5.1",
    "scope": null,
    "escapedName": "postcss-cli",
    "name": "postcss-cli",
    "rawSpec": "^2.5.1",
    "spec": ">=2.5.1 <3.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "#DEV:/"
  ],
  "_resolved": "https://registry.npmjs.org/postcss-cli/-/postcss-cli-2.6.0.tgz",
  "_shasum": "f0de393caa026fcfc1b1479822989af508ed515d",
  "_shrinkwrap": null,
  "_spec": "postcss-cli@^2.5.1",
  "_where": "/home/diego/Code/yawarfighters",
  "author": {
    "name": "Damian Krzeminski",
    "email": "pirxpilot@code42day.com"
  },
  "bin": {
    "postcss": "./bin/postcss"
  },
  "bugs": {
    "url": "https://github.com/postcss/postcss-cli/issues"
  },
  "dependencies": {
    "chokidar": "^1.5.1",
    "globby": "^4.1.0",
    "mkdirp": "^0.5.1",
    "neo-async": "^1.0.0",
    "postcss": "^5.0.0",
    "read-file-stdin": "^0.2.0",
    "resolve": "^1.1.6",
    "yargs": "^4.7.1"
  },
  "description": "CLI for postcss",
  "devDependencies": {
    "jshint": "^2.9.2",
    "postcss-import": "^8.1.2",
    "postcss-url": "^5.1.2"
  },
  "directories": {},
  "dist": {
    "shasum": "f0de393caa026fcfc1b1479822989af508ed515d",
    "tarball": "https://registry.npmjs.org/postcss-cli/-/postcss-cli-2.6.0.tgz"
  },
  "gitHead": "80bf8615cd6f3a98af4200dc7bdd89e4a88d3705",
  "homepage": "https://github.com/postcss/postcss-cli#readme",
  "keywords": [
    "postcss",
    "postcss-runner",
    "cli"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "ai",
      "email": "andrey@sitnik.ru"
    },
    {
      "name": "pirxpilot",
      "email": "pirxpilot@code42day.com"
    },
    {
      "name": "watilde",
      "email": "daijiro.wachi@gmail.com"
    }
  ],
  "name": "postcss-cli",
  "optionalDependencies": {
    "chokidar": "^1.5.1"
  },
  "readme": "[![Build Status](https://img.shields.io/travis/postcss/postcss-cli.svg)](http://travis-ci.org/postcss/postcss-cli)\n[![Dependency Status](https://img.shields.io/gemnasium/postcss/postcss-cli.svg)](https://gemnasium.com/postcss/postcss-cli)\n[![NPM version](https://img.shields.io/npm/v/postcss-cli.svg)](http://badge.fury.io/js/postcss-cli)\n\n# postcss-cli\n\nTraditional CLI for [postcss]\n\n## Installation\n\n`npm install postcss-cli`\n\n| postcss-cli version | postcss version |\n| ---- | ---- |\n| 1.x | 4.x |\n| 2.x | 5.x |\n\n## Usage\n\n    postcss [options] [-o output-file|-d output-directory|-r] [input-file]\n\n#### `--output|-o`\n\nOutput file name. If no output file is specified, `postcss` will write to `stdout`, however plugins\nthat rely on output file location will not work properly.\n\nSimilarly, if no input file is specified, `postcss` will read from `stdin`.\nPlugins that rely on input file location will not work properly.\n\n#### `--dir|-d`\n\nOutput files location. Either `--output`, `--dir` or `--replace` option, but\nnot all of them, need to be specified. `--dir` or `--replace` needs to be used\nif multiple input file is provided.\n\n#### `--replace|-r`\n\nReplace input file(s) with generated output. Either `--output`, `--dir` or\n`--replace` option, but not all of them, need to be specified. `--replace` or\n`--dir` needs to be used if multiple input file is provided.\n\n#### `--use|-u`\n\nPlugin to be used. Multiple plugins can be specified. At least one plugin needs to be specified either with `--use` option or in the config file.\n\n#### `--map|-m`\n\nActivate source map generation. By default inline maps are generated. To generate source maps\nin a separate _.map_ file use `--map file` or `--no-map.inline`.\n\nYou can use [advances source map options][source-map-options] - some examples:\n\n- `--no-map` - do not generated source maps - even if previous maps exist\n- `--map.annotation <path>` - specify alternaive path to be used in source map annotation appended to CSS\n- `--no-map.annotation` - supress adding annotation to CSS\n- `--no-map.sourcesContent` - remove origin CSS from maps\n\n#### `--local-plugins`\n\nLook up plugins starting from `node_modules` located in the current working\ndirectory. Without this option, postcss-cli will look for the plugins in the\n`node_modules` in which it is installed - specifically if it is installed\nglobally it will only look for plugins that are globally installed.\n\n#### `--watch|-w`\n\nObserve file system changes and recompile as source files change.\n\nWhen inlining CSS imports, add an update handler to your JavaScript\nconfiguration file to ensure referenced modules are taken into account:\n\n```js\n{\n  \"postcss-import\": {\n    onImport: function(sources) {\n      global.watchCSS(sources, this.from);\n    }\n  }\n}\n```\n\nFor [postcss-import], this handler is added automatically.\n\n#### `--config|-c`\n\nJSON file with plugin configuration. Plugin names should be the keys.\n\n````json\n{\n    \"autoprefixer\": {\n        \"browsers\": \"> 5%\"\n    },\n    \"postcss-cachify\": {\n        \"baseUrl\": \"/res\"\n    }\n}\n````\n\nJavaScript configuration can be used if functions are allowed as plugins parameters:\n\n````js\nmodule.exports = {\n  \"postcss-url\": {\n    url: function(url) { return \"http://example.com/\" + url; }\n  },\n  autoprefixer: {\n    browsers: \"> 5%\"\n  }\n};\n````\nAlternatively configuration options can be passed as `--plugin.option` parameters.\n\nNote that command-line options can also be specified in the config file:\n\n````json\n{\n    \"use\": [\"autoprefixer\", \"postcss-cachify\"],\n    \"input\": \"screen.css\",\n    \"output\": \"bundle.css\",\n    \"local-plugins\": true,\n    \"autoprefixer\": {\n        \"browsers\": \"> 5%\"\n    },\n    \"postcss-cachify\": {\n        \"baseUrl\": \"/res\"\n    }\n}\n````\n\n#### `--syntax|-s`\n\nOptional module to use as a [custom PostCSS syntax](https://github.com/postcss/postcss#custom-syntaxes).\n\n#### `--parser|-p`\n\nOptional module to use as a [custom PostCSS input parser](https://github.com/postcss/postcss#custom-syntaxes).\n\n#### `--stringifier|-t`\n\nOptional module to use as a [custom PostCSS output stringifier](https://github.com/postcss/postcss#custom-syntaxes).\n\n#### `--help|-h`\n\nShow help\n\n### Examples\n\nUse autoprefixer as a postcss plugin pass parameters from a json file\n\n    postcss --use autoprefixer -c options.json -o screen.css screen.css\n\nUse more than one plugin and pass config parameters\n\n    postcss --use autoprefixer --autoprefixer.browsers \"> 5%\" \\\n        --use postcss-cachify --postcss-cachify.baseUrl /res \\\n        -o screen.css screen.css\n\nUse multiple plugins and multiple input files\n\n    postcss -u postcss-cachify -u autoprefixer -d build *.css\n\n## License\n\nMIT\n\n[postcss]: https://github.com/postcss/postcss\n[postcss-import]: https://github.com/postcss/postcss-import\n[source-map-options]: https://github.com/postcss/postcss/blob/master/docs/source-maps.md\n",
  "readmeFilename": "Readme.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/postcss/postcss-cli.git"
  },
  "scripts": {
    "test": "make"
  },
  "version": "2.6.0"
}
