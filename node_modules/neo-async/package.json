{
  "_args": [
    [
      {
        "raw": "neo-async@^1.0.0",
        "scope": null,
        "escapedName": "neo-async",
        "name": "neo-async",
        "rawSpec": "^1.0.0",
        "spec": ">=1.0.0 <2.0.0",
        "type": "range"
      },
      "/home/diego/Code/yawarfighters/node_modules/postcss-cli"
    ]
  ],
  "_from": "neo-async@>=1.0.0 <2.0.0",
  "_id": "neo-async@1.8.2",
  "_inCache": true,
  "_location": "/neo-async",
  "_nodeVersion": "5.10.1",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/neo-async-1.8.2.tgz_1461305236253_0.2648263790179044"
  },
  "_npmUser": {
    "name": "suguru03",
    "email": "suguru.motegi@gmail.com"
  },
  "_npmVersion": "3.8.3",
  "_phantomChildren": {},
  "_requested": {
    "raw": "neo-async@^1.0.0",
    "scope": null,
    "escapedName": "neo-async",
    "name": "neo-async",
    "rawSpec": "^1.0.0",
    "spec": ">=1.0.0 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/postcss-cli"
  ],
  "_resolved": "https://registry.npmjs.org/neo-async/-/neo-async-1.8.2.tgz",
  "_shasum": "31795888b79dd04357a7c52113a65183e93b6735",
  "_shrinkwrap": null,
  "_spec": "neo-async@^1.0.0",
  "_where": "/home/diego/Code/yawarfighters/node_modules/postcss-cli",
  "bugs": {
    "url": "https://github.com/suguru03/neo-async/issues"
  },
  "dependencies": {},
  "description": "Neo-Async is thought to be used as a drop-in replacement for Async, it almost fully covers its functionality and runs faster ",
  "devDependencies": {
    "async": "^1.4.0",
    "benchmark": "^1.0.0",
    "changelog-generator": "0.0.4",
    "codecov.io": "^0.1.0",
    "event-stream": "^3.3.0",
    "func-comparator": "^0.6.1",
    "gulp": "^3.8.11",
    "gulp-exit": "0.0.2",
    "gulp-git": "^1.2.0",
    "gulp-jsbeautifier": "0.0.4",
    "gulp-jscs": "^1.4.0",
    "gulp-mocha": "^2.0.0",
    "gulp-util": "^3.0.3",
    "intelli-espower-loader": "^0.5.0",
    "istanbul": "^0.3.4",
    "jsdoc": "^3.3.0-beta3",
    "lodash": "^3.6.0",
    "minimist": "^1.1.1",
    "mocha": "^2.0.1",
    "mocha.parallel": "^0.7.1",
    "neo-async": "^0.6.5",
    "power-assert": "^0.10.0",
    "q": "~1.4.1",
    "require-dir": "^0.3.0"
  },
  "directories": {
    "test": "test/"
  },
  "dist": {
    "shasum": "31795888b79dd04357a7c52113a65183e93b6735",
    "tarball": "https://registry.npmjs.org/neo-async/-/neo-async-1.8.2.tgz"
  },
  "files": [
    "LICENSE",
    "CHANGELOG.md",
    "index.js",
    "lib/async.js",
    "lib/async.min.js",
    "dist/async.js",
    "dist/async.min.js"
  ],
  "gitHead": "fa7341e3ec15e5fe5a0dab98be63c9f5a012efc8",
  "homepage": "https://github.com/suguru03/neo-async",
  "keywords": [
    "async",
    "util"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "suguru03",
      "email": "hollow.03.03.bleach@gmail.com"
    }
  ],
  "name": "neo-async",
  "optionalDependencies": {},
  "readme": "# Neo-Async v1.8.2\n\n[![npm](https://img.shields.io/npm/v/neo-async.svg)](https://www.npmjs.com/package/neo-async)\n[![Travis](https://img.shields.io/travis/suguru03/neo-async.svg)](https://travis-ci.org/suguru03/neo-async)\n[![Codecov](https://img.shields.io/codecov/c/github/suguru03/neo-async.svg)](https://codecov.io/github/suguru03/neo-async?branch=master)\n[![Dependency Status](https://gemnasium.com/suguru03/neo-async.svg)](https://gemnasium.com/suguru03/neo-async)\n[![npm](https://img.shields.io/npm/dm/neo-async.svg)](https://www.npmjs.com/package/neo-async)\n\nNeo-Async is thought to be used as a drop-in replacement for [Async](https://github.com/caolan/async), it almost fully covers its functionality and runs [faster](#speed-comparison).\n\n[Async](https://github.com/caolan/async) allows double callbacks in `waterfall`, but Neo-Async does not allow. ([test](https://github.com/suguru03/async/tree/neo-async/test))\nPR is welcome ! Especially improvement for English documents :)\n\n![Neo-Async](https://raw.githubusercontent.com/wiki/suguru03/neo-async/images/neo_async.png)\n\n![nodei](https://nodei.co/npm/neo-async.png?downloads=true&downloadRank=true)\n\n## Installation\n\n### In a browser\n```html\n<script src=\"async.min.js\"></script>\n```\n\n### In an AMD loader\n```js\nrequire(['async'], function(async) {});\n```\n\n### Node.js\n\n#### standard\n\n```bash\n$ npm install neo-async\n```\n```js\nvar async = require('neo-async');\n\n// safe mode\nvar async = require('neo-async').safe; // avoid stack overflow if iterator is called on sync.\n```\n\n#### replacement\n```bash\n$ npm install neo-async\n$ ln -s ./node_modules/neo-async ./node_modules/async\n```\n```js\nvar async = require('async');\n```\n\n### Bower\n\n```bash\nbower install neo-async\n```\n\n## Feature\n\n[JSDoc](http://suguru03.github.io/neo-async/doc/async.html)\n\n\\* not in Async\n\n### Collections\n\n- [`each`](http://suguru03.github.io/neo-async/doc/async.each.html)\n- [`eachSeries`](http://suguru03.github.io/neo-async/doc/async.eachSeries.html)\n- [`eachLimit`](http://suguru03.github.io/neo-async/doc/async.eachLimit.html)\n- [`forEach`](http://suguru03.github.io/neo-async/doc/async.each.html) -> [`each`](http://suguru03.github.io/neo-async/doc/async.each.html)\n- [`forEachSeries`](http://suguru03.github.io/neo-async/doc/async.eachSeries.html) -> [`eachSeries`](http://suguru03.github.io/neo-async/doc/async.eachSeries.html)\n- [`forEachLimit`](http://suguru03.github.io/neo-async/doc/async.eachLimit.html) -> [`eachLimit`](http://suguru03.github.io/neo-async/doc/async.eachLimit.html)\n- [`eachOf`](http://suguru03.github.io/neo-async/doc/async.each.html) -> [`each`](http://suguru03.github.io/neo-async/doc/async.each.html)\n- [`eachOfSeries`](http://suguru03.github.io/neo-async/doc/async.eachSeries.html) -> [`eachSeries`](http://suguru03.github.io/neo-async/doc/async.eachSeries.html)\n- [`eachOfLimit`](http://suguru03.github.io/neo-async/doc/async.eachLimit.html) -> [`eachLimit`](http://suguru03.github.io/neo-async/doc/async.eachLimit.html)\n- [`forEachOf`](http://suguru03.github.io/neo-async/doc/async.each.html) -> [`each`](http://suguru03.github.io/neo-async/doc/async.each.html)\n- [`forEachOfSeries`](http://suguru03.github.io/neo-async/doc/async.eachSeries.html) -> [`eachSeries`](http://suguru03.github.io/neo-async/doc/async.eachSeries.html)\n- [`eachOfLimit`](http://suguru03.github.io/neo-async/doc/async.eachLimit.html) -> [`forEachLimit`](http://suguru03.github.io/neo-async/doc/async.eachLimit.html)\n- [`map`](http://suguru03.github.io/neo-async/doc/async.map.html)\n- [`mapSeries`](http://suguru03.github.io/neo-async/doc/async.mapSeries.html)\n- [`mapLimit`](http://suguru03.github.io/neo-async/doc/async.mapLimit.html)\n- [`mapValues`](http://suguru03.github.io/neo-async/doc/async.mapValues.html) *\n- [`mapValuesSeries`](http://suguru03.github.io/neo-async/doc/async.mapValuesSeries.html) *\n- [`mapValuesLimit`](http://suguru03.github.io/neo-async/doc/async.mapValuesLimit.html) *\n- [`filter`](http://suguru03.github.io/neo-async/doc/async.filter.html)\n- [`filterSeries`](http://suguru03.github.io/neo-async/doc/async.filterSeries.html)\n- [`filterLimit`](http://suguru03.github.io/neo-async/doc/async.filterLimit.html)\n- [`select`](http://suguru03.github.io/neo-async/doc/async.filter.html) -> [`filter`](http://suguru03.github.io/neo-async/doc/async.filter.html)\n- [`selectSeries`](http://suguru03.github.io/neo-async/doc/async.filterSeries.html) -> [`filterSeries`](http://suguru03.github.io/neo-async/doc/async.filterSeries.html)\n- [`selectLimit`](http://suguru03.github.io/neo-async/doc/async.filterLimit.html) -> [`filterLimit`](http://suguru03.github.io/neo-async/doc/async.filterLimit.html)\n- [`reject`](http://suguru03.github.io/neo-async/doc/async.reject.html)\n- [`rejectSeries`](http://suguru03.github.io/neo-async/doc/async.rejectSeries.html)\n- [`rejectLimit`](http://suguru03.github.io/neo-async/doc/async.rejectLimit.html)\n- [`detect`](http://suguru03.github.io/neo-async/doc/async.detect.html)\n- [`detectSeries`](http://suguru03.github.io/neo-async/doc/async.detectSeries.html)\n- [`detectLimit`](http://suguru03.github.io/neo-async/doc/async.detectLimit.html)\n- [`pick`](http://suguru03.github.io/neo-async/doc/async.pick.html) *\n- [`pickSeries`](http://suguru03.github.io/neo-async/doc/async.pickSeries.html) *\n- [`pickLimit`](http://suguru03.github.io/neo-async/doc/async.pickLimit.html) *\n- [`omit`](http://suguru03.github.io/neo-async/doc/async.omit.html) *\n- [`omitSeries`](http://suguru03.github.io/neo-async/doc/async.omitSeries.html) *\n- [`omitLimit`](http://suguru03.github.io/neo-async/doc/async.omitLimit.html) *\n- [`reduce`](http://suguru03.github.io/neo-async/doc/async.reduce.html)\n- [`inject`](http://suguru03.github.io/neo-async/doc/async.reduce.html) -> [`reduce`](http://suguru03.github.io/neo-async/doc/async.reduce.html)\n- [`foldl`](http://suguru03.github.io/neo-async/doc/async.reduce.html) -> [`reduce`](http://suguru03.github.io/neo-async/doc/async.reduce.html)\n- [`reduceRight`](http://suguru03.github.io/neo-async/doc/async.reduceRight.html)\n- [`foldr`](http://suguru03.github.io/neo-async/doc/async.reduceRight.html) -> [`reduceRight`](http://suguru03.github.io/neo-async/doc/async.reduceRight.html)\n- [`transform`](http://suguru03.github.io/neo-async/doc/async.transform.html) *\n- [`transformSeries`](http://suguru03.github.io/neo-async/doc/async.transformSeries.html) *\n- [`transformLimit`](http://suguru03.github.io/neo-async/doc/async.transformLimit.html) *\n- [`sortBy`](http://suguru03.github.io/neo-async/doc/async.sortBy.html)\n- [`sortBySeries`](http://suguru03.github.io/neo-async/doc/async.sortBySeries.html)\n- [`sortByLimit`](http://suguru03.github.io/neo-async/doc/async.sortByLimit.html) *\n- [`some`](http://suguru03.github.io/neo-async/doc/async.some.html)\n- [`someSeries`](http://suguru03.github.io/neo-async/doc/async.someSeries.html)\n- [`someLimit`](http://suguru03.github.io/neo-async/doc/async.someLimit.html)\n- [`any`](http://suguru03.github.io/neo-async/doc/async.some.html) -> [`some`](http://suguru03.github.io/neo-async/doc/async.some.html)\n- [`every`](http://suguru03.github.io/neo-async/doc/async.every.html)\n- [`everySeries`](http://suguru03.github.io/neo-async/doc/async.everySeries.html) *\n- [`everyLimit`](http://suguru03.github.io/neo-async/doc/async.everyLimit.html)\n- [`all`](http://suguru03.github.io/neo-async/doc/async.every.html) -> [`every`](http://suguru03.github.io/neo-async/doc/async.every.html)\n- [`concat`](http://suguru03.github.io/neo-async/doc/async.concat.html)\n- [`concatSeries`](http://suguru03.github.io/neo-async/doc/async.concatSeries.html)\n- [`concatLimit`](http://suguru03.github.io/neo-async/doc/async.concatLimit.html) *\n\n### Control Flow\n\n- [`parallel`](http://suguru03.github.io/neo-async/doc/async.parallel.html)\n- [`series`](http://suguru03.github.io/neo-async/doc/async.series.html)\n- [`parallelLimit`](http://suguru03.github.io/neo-async/doc/async.series.html)\n- [`waterfall`](http://suguru03.github.io/neo-async/doc/async.waterfall.html)\n- [`angelFall`](http://suguru03.github.io/neo-async/doc/async.angelFall.html) *\n- [`angelfall`](http://suguru03.github.io/neo-async/doc/async.angelFall.html) -> [`angelFall`](http://suguru03.github.io/neo-async/doc/async.angelFall.html) *\n- [`whilst`](#whilst)\n- [`doWhilst`](#doWhilst)\n- [`until`](#until)\n- [`forever`](#forever)\n- [`compose`](#compose)\n- [`seq`](#seq)\n- [`applyEach`](#applyEach)\n- [`applyEachSeries`](#applyEachSeries)\n- [`queue`](#queue)\n- [`priorityQueue`](#priorityQueue)\n- [`cargo`](#cargo)\n- [`auto`](#auto)\n- [`retry`](#retry)\n- [`iterator`](#iterator)\n- [`timeout`](http://suguru03.github.io/neo-async/doc/async.timeout.html)\n- [`times`](http://suguru03.github.io/neo-async/doc/async.times.html)\n- [`timesSeries`](http://suguru03.github.io/neo-async/doc/async.timesSeries.html)\n- [`timesLimit`](http://suguru03.github.io/neo-async/doc/async.timesLimit.html)\n\n### Utils\n- [`apply`](#apply)\n- [`nextTick`](#nextTick)\n- [`setImmediate`](#setImmediate)\n- [`safeNextTick`](#safeNextTick) *\n- [`asyncify`](#asyncify)\n- [`wrapSync`](#asyncify) -> [`asyncify`](#asyncify)\n- [`constant`](#constant)\n- [`ensureAsync`](#ensureAsync)\n- [`memoize`](#memoize)\n- [`unmemoize`](#unmemoize)\n- [`log`](#log)\n- [`dir`](#dir)\n- [`createLogger`](#createLogger)\n- [`noConflict`](#noConflict)\n- [`eventEmitter`](#eventEmitter) *\n- [`EventEmitter`](#EventEmitter) *\n- [`safe`](#safe) *\n\n### Safe\n\n```js\nvar async = require('neo-async').safe;\n// or\nvar async = require('neo-async');\nasync.safe.each(collection, iterator, callback);\n```\n\n## Speed Comparison\n\n* async v1.3.0\n* neo-async v1.3.0\n\n### Server-side\n\nSpeed comparison of server-side measured by [func-comparator](https://github.com/suguru03/func-comparator).\n\nSpecifications are as follows.\n\n* n times trials\n* Random execution order\n* Measure the average speed[μs] of n times\n\n__execute__\n\n* 100 times trials\n* 500000 tasks\n\nExecution environment are as follows.\n\n* node v0.10.40\n* node v0.12.7\n* iojs v2.3.4\n\n```bash\n$ node perf/func-comparator\n```\n__result__\n\nThe value is the ratio (Neo-Async/Async) of the average speed per n times.\n\n##### collections\n\n|function|node v0.10.40|node v0.12.7|iojs v2.3.4|\n|---|---|---|---|\n|each|2.01|1.95|2.19|\n|eachSeries|2.28|2.62|2.28|\n|eachLimit|2.33|3.32|2.81|\n|eachOf|1.93|1.92|2.12|\n|eachOfSeries|2.17|2.79|2.98|\n|eachOfLimit|2.03|1.54|2.57|\n|map|3.10|3.11|3.38|\n|mapSeries|2.36|1.98|2.32|\n|mapLimit|1.76|1.84|2.06|\n|filter|2.33|3.70|6.59|\n|filterSeries|2.11|2.71|3.68|\n|reject|2.71|4.38|7.33|\n|rejectSeries|2.31|3.09|3.86|\n|detect|2.31|2.69|2.92|\n|detectSeries|2.13|1.96|2.71|\n|reduce|2.09|1.94|2.26|\n|reduceRight|2.19|1.93|2.51|\n|sortBy|1.41|1.66|1.52|\n|some|2.23|2.29|2.50|\n|every|2.22|2.25|2.93|\n|concat|12.0|7.23|10.0|\n|concatSeries|8.37|5.15|8.05|\n\n##### control flow\n\n|function|node v0.10.40|node v0.12.7|iojs v2.3.4|\n|---|---|---|---|\n|parallel|4.13|5.00|3.37|\n|series|3.13|2.70|3.03|\n|parallelLimit|2.69|2.96|2.49|\n|waterfall|3.45|7.24|7.59|\n|whilst|1.02|1.09|1.14|\n|doWhilst|1.26|1.36|1.28|\n|until|1.02|1.08|1.13|\n|doUntil|1.25|1.31|1.34|\n|during|2.15|2.08|2.08|\n|doDuring|5.08|5.77|5.39|\n|times|4.07|3.16|3.44|\n|timesSeries|2.82|2.58|2.71|\n|timesLimit|2.23|2.05|1.93|\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/suguru03/neo-async.git"
  },
  "scripts": {
    "clean": "rm -rf coverage",
    "cov:99.8": "grep Lines | perl -nle 'my ($l, $c, $p, @d) = split(/[\\s%]+/); exit(($p > 99.8) == 0)'",
    "test": "istanbul cover ./node_modules/.bin/_mocha --report lcovonly -- -R spec ./test --recursive"
  },
  "version": "1.8.2"
}
